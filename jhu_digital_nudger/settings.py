"""
Django settings for jhu_digital_nudger project.

Generated by 'django-admin startproject' using Django 3.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import re
import environ

from pathlib import Path
from django.templatetags.static import static
from django.urls import reverse_lazy
from import_export.formats.base_formats import XLSX, CSV
# from django.utils.translation import gettext_lazy as _

env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Base URL
try:
    BASE_URL = env.str("BASE_URL")
except:
    BASE_URL = 'http://127.0.0.1:8000'
    
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*#=99+r9=vbp2+b*8srxoaaz(kfkf^aq_q3s&necxgp$ie!b#p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG")

ALLOWED_HOSTS = ['*', 'localhost', '127.0.0.1', '.ngrok.io',
                 'https://4254-102-216-146-214.ngrok-free.app']

CSRF_TRUSTED_ORIGINS = ['https://3135-62-8-85-223.ngrok-free.app',]
# Application definition

INSTALLED_APPS = [
    'pages.apps.PagesConfig',
    'dashboard',
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    # optional, if django-simple-history package is used
    "unfold.contrib.simple_history",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'phonenumber_field',
    'rest_framework',
    'import_export',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'jhu_digital_nudger.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates/",
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jhu_digital_nudger.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {     
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT"),
    }
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# BASE_DIR = os.path.dirname(os.path.abspath(__file__))

STATIC_ROOT = os.path.normpath(os.path.join(BASE_DIR, 'staticfiles'))
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# Get App Version
changelog_file = os.path.abspath(os.path.join(BASE_DIR, 'CHANGELOG.md'))


def get_version(file_path):
    """
        Get the app version
        :return:
    """
    version_file_path = file_path
    vfile = open(version_file_path).read()
    version = re.search(
        r"^__version__= ['\"]([^'\"]+)['\"]", vfile, flags=re.MULTILINE).group(1)

    return version


APP_VERSION = get_version(changelog_file)
ADMIN_SITE_HEADER = "Digital Nudger {version}".format(version=APP_VERSION)

EXPORT_FORMATS = [XLSX, CSV]


# Unfold theme settings
UNFOLD = {
    "SITE_TITLE": "Digital Nudger",
    "SITE_HEADER": ADMIN_SITE_HEADER,
    "SITE_URL": "/",
    # "SITE_ICON": lambda request: static("icon.svg"),  # both modes, optimise for 32px height
    # "SITE_ICON": {
    #     "light": lambda request: static("../see_change.png"),  # light mode
    #     "dark": lambda request: static("../see_change.png"),  # dark mode
    # },
    # # "SITE_LOGO": lambda request: static("logo.svg"),  # both modes, optimise for 32px height
    # "SITE_LOGO": {
    #     "light": lambda request: static("../see_change.png"),  # light mode
    #     "dark": lambda request: static("../see_change.png"),  # dark mode
    # },
    "SITE_SYMBOL": "speed",  # symbol from icon set
    "SHOW_HISTORY": True,  # show/hide "History" button, default: True
    "SHOW_VIEW_ON_SITE": True,  # show/hide "View on site" button, default: True
    "ENVIRONMENT": "sample_app.environment_callback",
    # "DASHBOARD_CALLBACK": "sample_app.dashboard_callback",
    # "LOGIN": {
    #     "image": lambda request: static("sample/login-bg.jpg"),
    #     "redirect_after": lambda request: reverse_lazy("admin:APP_MODEL_changelist"),
    # },
    "STYLES": [
        lambda request: static("css/style.css"),
    ],
    "SCRIPTS": [
        lambda request: static("js/script.js"),
    ],
    "COLORS": {
        "primary": {
            "50": "250 245 255",
            "100": "243 232 255",
            "200": "233 213 255",
            "300": "216 180 254",
            "400": "192 132 252",
            "500": "168 85 247",
            "600": "147 51 234",
            "700": "126 34 206",
            "800": "107 33 168",
            "900": "88 28 135",
            "950": "59 7 100",
        },
    },
    # "EXTENSIONS": {
    #     "modeltranslation": {
    #         "flags": {
    #             "en": "ðŸ‡¬ðŸ‡§",
    #             "fr": "ðŸ‡«ðŸ‡·",
    #             "nl": "ðŸ‡§ðŸ‡ª",
    #         },
    #     },
    # },
    "SIDEBAR": {
        "show_search": False,  # Search in applications and models names
        "show_all_applications": False,  # Dropdown with all applications and models
        "navigation": [
            {
                "title": "Navigation",
                "separator": True,  # Top border
                "items": [
                    {
                        "title": "Home",
                        "icon": "home",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:index"),
                        # "badge": "sample_app.badge_callback",
                        "permission": lambda request: request.user.is_superuser,
                    },
                     {
                        "title": "Dashboard",
                        "icon": "dashboard",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:dashboard_dashboard_changelist"),
                        # "badge": "sample_app.badge_callback",
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Trainers",
                        "icon": "people",
                        "link": reverse_lazy("admin:pages_trainer_changelist"),
                    },
                    {
                        "title": "Trainees",
                        "icon": "people",
                        "link": reverse_lazy("admin:pages_trainee_changelist"),
                    },
                    {
                        "title": "Cohorts",
                        "icon": "book",
                        "link": reverse_lazy("admin:pages_cohort_changelist"),
                    },
                    {
                        "title": "Bots",
                        "icon": "robot",
                        "link": reverse_lazy("admin:pages_bot_changelist"),
                    },
                    {
                        "title": "Content",
                        "icon": "article",
                        "link": reverse_lazy("admin:pages_content_changelist"),
                    },
                    #  {
                    #     "title": "Topic",
                    #     "icon": "topic",
                    #     "link": reverse_lazy("admin:pages_topic_changelist"),
                    # },
                    {
                        "title": "Messaging",
                        "icon": "inbox",
                        "link": reverse_lazy("admin:pages_messages_changelist"),
                    },
                    {
                        "title": "User Notes",
                        "icon": "notes",
                        "link": reverse_lazy("admin:pages_usernote_changelist"),
                    },
                ],
            },
        ],
    },

    # "TABS": [
    #     {
    #         "models": [
    #             "admin:django.contrib.auth.user",
    #         ],
    #         # "items": [
    #         #     {
    #         #         "title": "Your custom title",
    #         #         "link": reverse_lazy("admin:django.contrib.auth_User_changelist"),
    #         #         "permission": "sample_app.permission_callback",
    #         #     },
    #         # ],
    #     },
    # ],
}


def dashboard_callback(request, context):
    """
    Callback to prepare custom variables for index template which is used as dashboard
    template. It can be overridden in application by creating custom admin/index.html.
    """
    context.update(
        {
            "sample": "example",  # this will be injected into templates/admin/index.html
        }
    )
    return context


def environment_callback(request):
    """
    Callback has to return a list of two values represeting text value and the color
    type of the label displayed in top right corner.
    """
    return ["Production", "danger"]  # info, danger, warning, success


def badge_callback(request):
    return 3


def permission_callback(request):
    return request.user.has_perm("sample_app.change_model")
